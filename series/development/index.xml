<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Eddie Abbondanzio</title>
    <link>https://eddieabbondanz.io/series/development/</link>
    <description>Recent content in Development on Eddie Abbondanzio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eddieabbondanz.io/series/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abusing For Loops In C# For Job Security</title>
      <link>https://eddieabbondanz.io/post/c-sharp/abusing-for-loops-for-job-security/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/c-sharp/abusing-for-loops-for-job-security/</guid>
      <description>Everyone knows good code is easy to maintain, but that also means anyone can maintain it. That&amp;rsquo;s no bueno for the individual developer who wants a little job security. Writing overly complex code that nobody else can maintain let alone read, will ensure your company holds onto you, and will give you more bargaining power come raise time.</description>
    </item>
    
    <item>
      <title>TypeScript - Await Promise.All() And Get The Results</title>
      <link>https://eddieabbondanz.io/post/typescript/await-promise-all/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/await-promise-all/</guid>
      <description>I&amp;rsquo;m a big fan of the async await syntax in ES2017. In my opinion it just feels a lot more natural than and then and then and then&amp;hellip;. I digress. I&amp;rsquo;ll keep this one short.</description>
    </item>
    
    <item>
      <title>Unity - LiteNetLib&#39;s Delivery Methods</title>
      <link>https://eddieabbondanz.io/post/unity/litenetlib-delivery-methods/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/litenetlib-delivery-methods/</guid>
      <description>While LiteNetLib may run on UDP (User Datagram Protocol) which is an unreliable network protocol, LiteNetLib offers multiple delivery methods, some of which even offer &amp;ldquo;reliability&amp;rdquo;. Reliability is in quotes because when latency is high the chance of a packet being dropped is greater than 0 (although still fairly rare).</description>
    </item>
    
    <item>
      <title>Unity - How to Create a Basic Server / Client With LiteNetLib</title>
      <link>https://eddieabbondanz.io/post/unity/litenetlib-basic-server-client/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/litenetlib-basic-server-client/</guid>
      <description>LiteNetLib already provides a good example for creating a basic server / client set up in their documents, but if we want to use it with Unity there&amp;rsquo;s a few extra steps we&amp;rsquo;ll need to take.</description>
    </item>
    
    <item>
      <title>Unity - How to Send Data With LiteNetLib</title>
      <link>https://eddieabbondanz.io/post/unity/litenetlib-sending-data/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/litenetlib-sending-data/</guid>
      <description>Continuing off the previous post about how to build a basic server / client set up with LiteNetLib it&amp;rsquo;s time to talk about sending data. Because, well, a network set up that doesn&amp;rsquo;t actually send any data is kind of useless.</description>
    </item>
    
    <item>
      <title>Unity - How to Set Up LiteNetLib</title>
      <link>https://eddieabbondanz.io/post/unity/litenetlib-setup/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/litenetlib-setup/</guid>
      <description>TL;DR Download the most recent stable release source code zip and copy the /LiteNetLib folder to the Plugins folder in your Unity project.
LiteNetLib is an UDP networking library that can be used for building multiplayer games with Unity.</description>
    </item>
    
    <item>
      <title>ASP.NET Core - Claims Based Authentication: Claims vs Identities vs Principals</title>
      <link>https://eddieabbondanz.io/post/aspnet/claims-based-authentication-claims-identities-principals/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/aspnet/claims-based-authentication-claims-identities-principals/</guid>
      <description>With the rise of ASP.NET Core over ASP.NET 4.x, the built in authentication has undergone a shift from role-based access control (RBAC) to claim-based access control (CBAC). The most notable change is the User property on HttpContext is now of type ClaimsPrincipal instead of IPrincipal.</description>
    </item>
    
    <item>
      <title>ASP.NET Core - Inversion of Control Container</title>
      <link>https://eddieabbondanz.io/post/aspnet/inversion-of-control-containers/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/aspnet/inversion-of-control-containers/</guid>
      <description>ASP.NET Core supports dependency injection directly out of the box. For Web APIs this is useful for automatically resolving dependencies needed by controllers, or if you&amp;rsquo;re a fan of Uncle Bob&amp;rsquo;s Clean Architecture it can be used to inject external dependencies such as the database into the inner layers.</description>
    </item>
    
    <item>
      <title>TypeScript - Interpolated Strings</title>
      <link>https://eddieabbondanz.io/post/typescript/interpolated-strings/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/interpolated-strings/</guid>
      <description>Coming from the .NET world String.Format() was by far my most used function for generating user readable error / log messages. After jumping over to TypeScript, I was bummed to learn that no similar function existed.</description>
    </item>
    
    <item>
      <title>HTTP Status Codes For a RESTful API</title>
      <link>https://eddieabbondanz.io/post/http/status-codes-for-rest/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/http/status-codes-for-rest/</guid>
      <description>Hyper Text Transfer Protocol (HTTP) powers the web. It&amp;rsquo;s the silent work horse used to carry data between servers and clients, and is the reason why all URLs start with HTTP, or HTTPS.</description>
    </item>
    
    <item>
      <title>HTTP Cookies</title>
      <link>https://eddieabbondanz.io/post/http/cookies/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/http/cookies/</guid>
      <description>HTTP cookies are small bits of text that are included with each HTTP request made from a user&amp;rsquo;s web browser to web servers. HTTP is a stateless protocol which means each requests is treated as a unique command, and no state data is maintained.</description>
    </item>
    
    <item>
      <title>TypeScript - Events</title>
      <link>https://eddieabbondanz.io/post/typescript/events/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/events/</guid>
      <description>If you were expecting a phone call from a friend, you (hopefully) wouldn&amp;rsquo;t sit by the phone and continuously pick it up to see if your friend was on the other end.</description>
    </item>
    
    <item>
      <title>TypeScript - Taking The Magic Out of Magic Strings</title>
      <link>https://eddieabbondanz.io/post/typescript/magic-strings/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/magic-strings/</guid>
      <description># What&amp;rsquo;s so Magical About Magic Strings? Magic strings are string literals strewn about a code base that apply some kind of limitation to the code. They can be used to filter valid input, constrain parameters, or control the behavior of code.</description>
    </item>
    
    <item>
      <title>TypeScript - How To Set Up A New Project</title>
      <link>https://eddieabbondanz.io/post/typescript/setting-up-a-typescript-project/</link>
      <pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/setting-up-a-typescript-project/</guid>
      <description>For beginners TypeScript is like the carrot on the end of the stick, always just out of reach no matter how hard you try. Everyone touts how it&amp;rsquo;s &amp;ldquo;JavaScript that scales&amp;rdquo;, and once you use it you&amp;rsquo;ll never go back.</description>
    </item>
    
    <item>
      <title>Software Design - Marker Interfaces</title>
      <link>https://eddieabbondanz.io/post/software-design/marker-interfaces/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/marker-interfaces/</guid>
      <description># What Are They? A marker interface is an empty interface (no methods or properties) that is used to identify classes that implement it belong to a special group. Some might argue that this is a code smell, but in certain situations they can be the best solution for constraining types.</description>
    </item>
    
    <item>
      <title>Software Design - Magic Numbers</title>
      <link>https://eddieabbondanz.io/post/software-design/magic-numbers/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/magic-numbers/</guid>
      <description># What Are They? Magic numbers are numbers in code that appear to be arbitrary, but actually serve a purpose. They are commonly described as an anti-pattern as they diminish code quality, and are &amp;ldquo;referred to as breaking one of the oldest rules of programming, dating back to the COBOL, FORTRAN and PL/1 manuals of the 1960s&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Software Design - Dependency Injection and Inversion</title>
      <link>https://eddieabbondanz.io/post/software-design/dependency-injection/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/dependency-injection/</guid>
      <description># What are they? While it may seem like nothing more than buzz words, dependency injection is a well known principle. In fact, you&amp;rsquo;ve likely used it yourself in the past and just didn&amp;rsquo;t know the technique had a name.</description>
    </item>
    
    <item>
      <title>Software Design - Unit Tests vs Integration Tests</title>
      <link>https://eddieabbondanz.io/post/software-design/unit-tests-vs-integration-tests/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/unit-tests-vs-integration-tests/</guid>
      <description># Preface Unit tests and integration tests are designed to serve two different purposes. They are not meant to substitute each other, and each type has a specific focus. However, developers tend to struggle to determine the border that seperates unit tests and integration tests as there is no set hard limit on either one.</description>
    </item>
    
    <item>
      <title>No Mans Blocks - 10/13/2018</title>
      <link>https://eddieabbondanz.io/post/nomansblocks/18-10-13/</link>
      <pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/nomansblocks/18-10-13/</guid>
      <description># Where I&amp;rsquo;ve Been, and Where I&amp;rsquo;m Heading I took somewhat of an unplanned hiatus from working on No Mans Blocks. Initially, I took a break because I wanted to pursue writing a server for a Reddit clone.</description>
    </item>
    
    <item>
      <title>Software Design - Validator Pattern</title>
      <link>https://eddieabbondanz.io/post/software-design/validator-pattern/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/software-design/validator-pattern/</guid>
      <description>It&amp;rsquo;s quite typical for a Domain Driven Design (DDD) project to need validation for it&amp;rsquo;s domain models. While it may be sufficient to solve this by adding an IsValid() method to each model, this can cause confusion for the developer by cluttering the model class, and/or by requiring the IsValid() method to be generalized that it covers a large range of validation rules for any situation that may arise.</description>
    </item>
    
    <item>
      <title>No Mans Blocks - 6/4/18</title>
      <link>https://eddieabbondanz.io/post/nomansblocks/18-06-04/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/nomansblocks/18-06-04/</guid>
      <description># Creating Time (literally!) I have a knack for forgetting what I&amp;rsquo;ve managed to accomplish on the game during the week. To try to overcome this so I have updates I can post on it, I&amp;rsquo;ve started writing down each accomplishment on a sticky note.</description>
    </item>
    
    <item>
      <title>C# Threadable Queue</title>
      <link>https://eddieabbondanz.io/post/c-sharp/threadable-queue/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/c-sharp/threadable-queue/</guid>
      <description># Implementing a Thread-Safe Queue One of the most useful data structures when it comes to multi-threading is the queue. However, queues in c# aren&amp;rsquo;t thread-safe by default. Thankfully it&amp;rsquo;s easy enough to implement your own as we will do today.</description>
    </item>
    
    <item>
      <title>No Mans Blocks - 4/20/18</title>
      <link>https://eddieabbondanz.io/post/nomansblocks/18-04-20/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/nomansblocks/18-04-20/</guid>
      <description># Playing Around at the Bit Level This weeks adventure has been exploring object serialization. Initially I was using the serializable attribute to convert my objects into byte arrays but for some objects such as the voxel chunks this is far from ideal.</description>
    </item>
    
    <item>
      <title>No Mans Blocks - 4/8/18</title>
      <link>https://eddieabbondanz.io/post/nomansblocks/18-04-08/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/nomansblocks/18-04-08/</guid>
      <description># Building Up the Network Logic While this week may not have much to show for it has built a solid foundation for networking. I spent some time refactoring the pre-existing network logic to try to clean things up.</description>
    </item>
    
    <item>
      <title>Logging to Unity or Console</title>
      <link>https://eddieabbondanz.io/post/unity/debug-logging/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/debug-logging/</guid>
      <description>Sometimes we want code that can run outside of Unity and that can make things tricky when it comes to writing text to console. Unity has it&amp;rsquo;s own set of methods for writing to it&amp;rsquo;s command console via the Debug class with the most commonly used one being Debug.</description>
    </item>
    
    <item>
      <title>No Mans Blocks - 3/31/18</title>
      <link>https://eddieabbondanz.io/post/nomansblocks/18-03-31/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/nomansblocks/18-03-31/</guid>
      <description># Stepping back into Networking These past few months I&amp;rsquo;ve been on a tangent that wasn&amp;rsquo;t exactly planned. Diving head first into networking code, and attempting to refactor the voxel engine to support it really burnt me out.</description>
    </item>
    
    <item>
      <title>Object Pooling in Unity</title>
      <link>https://eddieabbondanz.io/post/unity/object-pool/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/object-pool/</guid>
      <description>Creating new gameobjects during runtime can be a costly operation. Multiple this action by 10 or more times in a single frame and you&amp;rsquo;ll notice a slight hiccup in FPS. One option to counter this is by taking advantage of object pooling.</description>
    </item>
    
    <item>
      <title>Greedy Meshing for Vertex Colored Voxels In Unity</title>
      <link>https://eddieabbondanz.io/post/voxel/greedy-mesh/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/voxel/greedy-mesh/</guid>
      <description>TL;DR Full algorithm is at the bottom. Classes for Block, Chunk, and MeshData are defined below the intro.
This article goes over how to implement a greedy meshing algorithm for generating optimized meshes for vertex-colored voxels in Unity.</description>
    </item>
    
  </channel>
</rss>
